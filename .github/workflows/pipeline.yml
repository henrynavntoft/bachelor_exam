name: Pipeline

on:
  push:
    branches:
      - master

jobs:
  lint-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: npm install

      - name: Lint frontend
        run: npm run lint

  lint-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: npm install

      - name: Lint backend
        run: npm run lint

  deploy:
    needs: [lint-frontend, lint-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Manually set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -o BatchMode=yes -T ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} echo "SSH connection successful"

      - name: Pull, Deploy, Prune via SSH
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            echo "== Navigating to app folder =="
            cd /root/bachelor_exam
            echo "== Stashing and pulling latest code on master branch =="
            git stash
            git fetch origin
            git checkout master
            git pull origin master
            echo "== Shutting down current containers =="
            RTE=prod docker compose down
            echo "== Building and starting containers =="
            RTE=prod docker compose up -d --build
            echo "== Pruning unused Docker resources =="
            docker system prune -af
            docker volume prune -f
            echo "== Listing running containers =="
            docker ps -a
            echo "== Checking for unhealthy containers =="
            docker ps --filter "health=unhealthy" --format "table {{.Names}}\t{{.Status}}"

            echo "== Backend Logs =="
            docker logs backend || true

            echo "== Frontend Logs =="
            docker logs frontend || true
          EOF