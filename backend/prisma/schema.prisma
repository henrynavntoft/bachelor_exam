// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  HOST
  ADMIN
}

model User {
  id                 String                   @id @default(uuid())
  firstName          String
  lastName           String
  email              String                   @unique
  hashedPassword     String
  profilePicture     String?
  role               Role                     @default(GUEST)
  isVerified         Boolean                  @default(false)
  hostedEvents       Event[]                  @relation("HostEvents")
  attendingEvents    Attendee[] // guests attending events
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  isDeleted          Boolean                  @default(false)
  resetTokens        PasswordResetToken[]
  verificationTokens EmailVerificationToken[]
  messages           Message[]
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Event {
  id          String     @id @default(uuid())
  title       String
  description String
  images      String[]
  date        DateTime
  location    String
  hostId      String
  host        User       @relation("HostEvents", fields: [hostId], references: [id])
  attendees   Attendee[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDeleted   Boolean    @default(false)
  messages    Message[]
}

model Attendee {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
}
