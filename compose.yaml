services:
  frontend:
    container_name: frontend
    volumes:
    - ./frontend:/app:cached
    - /app/node_modules
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - RTE=${RTE}
    env_file:
      - ./frontend/.env.${RTE}
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - external-network
  backend:
    container_name: backend
    volumes:
    - ./backend:/app:cached
    - /app/node_modules
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - RTE=${RTE}
    env_file:
      - ./backend/.env.${RTE}
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - internal-network
      - external-network
  db:
    container_name: db
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.${RTE}.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - internal-network
      - external-network

networks:
  internal-network:
    driver: bridge
  external-network:
    driver: bridge

volumes:
  pgdata: {}
